<?xml version="1.0" encoding="UTF-8"?>
<!--네임스페이스를 추가하면 해당 URL과 실제 파일명을 적어줘야한다 .xsd로 끝나는 파일명-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!--특정 패키지 안의 클래스들을 스캔하고 빈 인스턴스를 생성한다. 아래와 같은 정확한 어노테이션이 존재해야지 빈을 생성할수있다. https://hamait.tistory.com/322 참고
        @Component @Repository @Service @Controller-->
    <context:component-scan base-package="com.sb.macro"/>

    <!--    애노테이션 방식의 @MVC를 사용시 필요한 몇가지 빈들을 자동으로 등록해 준다. https://kdarkdev.tistory.com/103 참고-->
    <mvc:annotation-driven>
        <!-- @ResponseBody로 String 처리할때 한글처리 https://victorydntmd.tistory.com/172 참고하도록 하고 pom.xml에 관련 디펜던시도 추가돼야한다.-->
        <!--오류날 경우 https://stackoverflow.com/questions/20969722/classnotfoundexception-org-springframework-http-converter-json-mappingjacksonht-->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json; charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 리소스 맵핑 -->
    <mvc:resources mapping="/css/**" location="/css/"/>

    <!--프로퍼티스 파일을 설정한다. https://ethank.tistory.com/entry/%EC%8A%A4%ED%94%84%EB%A7%81-Properties-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4%EC%84%9C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0 -->
    <context:property-placeholder location="classpath:database/application.properties"/>

    <!--파일 전송을 위한 설정-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
          p:defaultEncoding="utf-8"/>


    <!--DB 설정-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          p:driverClass="net.sf.log4jdbc.DriverSpy"
          p:jdbcUrl="jdbc:log4jdbc:mysql://localhost/mina?characterEncoding=utf8"
          p:user="root"
          p:password="1234"/>
    <!--DB PlatformTransactionManager 빈 설정 https://wikibook.co.kr/article/transaction-management-using-spring/ -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource"/>
    <!--DB @Transactional 애노테이션 활성화 설정 https://beyondj2ee.wordpress.com/2013/06/15/txannotation-driven%EA%B8%B0%EB%B0%98-mulitiple-transaction-%EC%84%A4%EC%A0%95/ -->
    <tx:annotation-driven/>
    <!--DB spring - mybatis 매퍼 설정 http://www.mybatis.org/mybatis-3/ko/getting-started.html -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations">
            <list>
                <!--classpath:com/ 이 부분을 인텔리제이에선 classpath*:com/ 이런식으로 * 을 붙여줘야 작동한다! 중요!! https://jeekchic.tistory.com/2-->
                <value>classpath*:com/sb/macro/mapper/*.xml</value>
                <!--다음과 같이 value 를 추가하여 다양한 경로에서 찾을 수 있도록 설정할수도 있다.-->
                <!--<value>classpath:com/erp/**/*.xml</value>-->
            </list>
        </property>
    </bean>
    <!--DB SqlSessionTemplate 등록 http://www.mybatis.org/spring/ko/sqlsession.html -->
    <bean id="sqlSession"
          class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
    <!--DB SQL문 콘솔에 로그찍기 -->
    <bean id="dataSource_log" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
        <constructor-arg ref="dataSource"/>
        <property name="logFormatter">
            <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
                <property name="loggingType" value="MULTI_LINE"/>
                <property name="sqlPrefix" value="SQL::: "/>
            </bean>
        </property>
    </bean>

    <!--인터셉터-->
<!--    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/*" />
            <mvc:exclude-mapping path="/login" />
            <bean class="com.sb.macro.interceptor.LoginInterceptor" />
        </mvc:interceptor>

    </mvc:interceptors>-->

    <!-- Email -->
<!--
    <bean id="mailSender"
          class="org.springframework.mail.javamail.JavaMailSenderImpl">
        &lt;!&ndash; JavaMailSenderImpl : Interface &ndash;&gt;
        <property name="host" value="smtp.gmail.com" />
        <property name="port" value="587" />&lt;!&ndash; 465 or 25 &ndash;&gt;
        &lt;!&ndash; 보내는 사람의 Email ID &ndash;&gt;
        <property name="username" value="bitcamp1114@gmail.com" />
        &lt;!&ndash; 보내는 사람의 Email Password &ndash;&gt;
        <property name="password" value="bitcamp123!" />
        <property name="defaultEncoding" value="utf-8" />
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean>
-->


</beans>
